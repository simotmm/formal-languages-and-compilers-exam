
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\002\007\000\002\006" +
    "\011\000\002\006\011\000\002\006\011\000\002\003\004" +
    "\000\002\004\004\000\002\005\004\000\002\005\005\000" +
    "\002\005\002\000\002\007\004\000\002\007\005\000\002" +
    "\010\006\000\002\014\005\000\002\014\007\000\002\011" +
    "\004\000\002\012\002\000\002\012\007\000\002\015\005" +
    "\000\002\015\007\000\002\017\003\000\002\017\002\000" +
    "\002\013\010\000\002\013\011\000\002\016\006\000\002" +
    "\016\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\010\005\ufff8\006\ufff8\007\004\001\002\000" +
    "\004\014\126\001\002\000\010\005\103\006\101\007\100" +
    "\001\002\000\004\002\077\001\002\000\004\004\010\001" +
    "\002\000\004\021\013\001\002\000\006\004\027\021\013" +
    "\001\002\000\004\021\013\001\002\000\004\012\014\001" +
    "\002\000\004\021\016\001\002\000\006\013\021\014\022" +
    "\001\002\000\004\023\017\001\002\000\004\016\020\001" +
    "\002\000\006\013\ufff4\014\ufff4\001\002\000\004\021\023" +
    "\001\002\000\006\004\ufff5\021\ufff5\001\002\000\004\023" +
    "\024\001\002\000\004\016\025\001\002\000\006\013\ufff3" +
    "\014\ufff3\001\002\000\006\004\ufff7\021\ufff7\001\002\000" +
    "\006\017\032\023\ufff1\001\002\000\004\021\013\001\002" +
    "\000\006\004\ufff6\021\ufff6\001\002\000\004\010\064\001" +
    "\002\000\004\023\036\001\002\000\004\002\000\001\002" +
    "\000\006\002\ufff2\023\056\001\002\000\006\020\037\021" +
    "\uffec\001\002\000\004\021\uffed\001\002\000\004\021\041" +
    "\001\002\000\004\012\042\001\002\000\004\021\044\001" +
    "\002\000\006\013\050\014\051\001\002\000\004\015\045" +
    "\001\002\000\004\021\046\001\002\000\004\022\047\001" +
    "\002\000\006\013\uffe9\014\uffe9\001\002\000\004\021\052" +
    "\001\002\000\006\002\uffeb\023\uffeb\001\002\000\004\015" +
    "\053\001\002\000\004\021\054\001\002\000\004\022\055" +
    "\001\002\000\006\013\uffe8\014\uffe8\001\002\000\006\020" +
    "\037\021\uffec\001\002\000\004\021\060\001\002\000\004" +
    "\012\061\001\002\000\004\021\044\001\002\000\006\013" +
    "\050\014\063\001\002\000\006\002\uffea\023\uffea\001\002" +
    "\000\004\021\066\001\002\000\006\011\072\013\071\001" +
    "\002\000\004\015\067\001\002\000\004\021\070\001\002" +
    "\000\006\011\uffef\013\uffef\001\002\000\004\021\074\001" +
    "\002\000\004\014\073\001\002\000\004\023\ufff0\001\002" +
    "\000\004\015\075\001\002\000\004\021\076\001\002\000" +
    "\006\011\uffee\013\uffee\001\002\000\004\002\001\001\002" +
    "\000\004\014\125\001\002\000\004\014\124\001\002\000" +
    "\010\005\ufff8\006\ufff8\007\004\001\002\000\004\014\112" +
    "\001\002\000\006\006\ufff8\007\004\001\002\000\006\006" +
    "\101\007\100\001\002\000\006\006\ufff8\007\004\001\002" +
    "\000\006\006\101\007\100\001\002\000\006\004\ufff8\007" +
    "\004\001\002\000\006\004\uffff\007\100\001\002\000\010" +
    "\004\ufffc\006\ufffc\007\ufffc\001\002\000\010\005\103\006" +
    "\101\007\100\001\002\000\006\005\ufff8\007\004\001\002" +
    "\000\006\006\ufff8\007\004\001\002\000\006\006\101\007" +
    "\100\001\002\000\006\004\ufff8\007\004\001\002\000\006" +
    "\004\ufffe\007\100\001\002\000\006\005\103\007\100\001" +
    "\002\000\006\004\ufff8\007\004\001\002\000\006\004\ufffd" +
    "\007\100\001\002\000\012\004\ufffb\005\ufffb\006\ufffb\007" +
    "\ufffb\001\002\000\012\004\ufff9\005\ufff9\006\ufff9\007\ufff9" +
    "\001\002\000\012\004\ufffa\005\ufffa\006\ufffa\007\ufffa\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\010\002\005\005\004\006\006\001\001\000" +
    "\002\001\001\000\006\003\103\004\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\010\010\011\001" +
    "\001\000\004\010\027\001\001\000\004\010\025\001\001" +
    "\000\002\001\001\000\004\014\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\033\012\032\001\001\000\004\010\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\112\001\001\000" +
    "\002\001\001\000\004\005\104\001\001\000\004\004\105" +
    "\001\001\000\004\005\106\001\001\000\004\004\107\001" +
    "\001\000\004\005\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\114\004\113\001\001\000\004\005" +
    "\120\001\001\000\004\005\115\001\001\000\004\004\116" +
    "\001\001\000\004\005\117\001\001\000\002\001\001\000" +
    "\004\003\121\001\001\000\004\005\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    table = new HashMap<String, HashMap<String, Float>>();

    }


    public HashMap<String, HashMap<String, Float>> table;

    public void report_error(String message, Object info){
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol){
            if(((Symbol)info).left != 1 && ((Symbol)info).right != 1){
                if(((Symbol)info).left != -1 && ((Symbol)info).right != -1){
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append("(line" + line + "column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }

     // Return semantic value of symbol in position (position)
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }
	
	// funzione per formattare i float 
    public static String formatFloat(float number) {
        String formatted = String.format(Locale.US, "%.2f", number);
        return formatted;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP camping_section SEP users_sections 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= t3 t1 t3 t2 t3 t2 t3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= t3 t2 t3 t1 t3 t2 t3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= t3 t2 t3 t2 t3 t1 t3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // t1 ::= TOK1 SCOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // t2 ::= TOK2 SCOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // t3 ::= TOK3 SCOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // t3 ::= t3 TOK3 SCOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // t3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // camping_section ::= sol sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("camping_section",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // camping_section ::= camping_section sol sol 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("camping_section",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sol ::= QSTRING COLON characteristics SCOLON 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap x = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.table.put(type, x);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sol",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // characteristics ::= QSTRING REAL EURODAY 
            {
              HashMap RESULT =null;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int priceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int priceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float price = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        HashMap tab = new HashMap<String, Float>();
        tab.put((String)dim, (Float)price);
        RESULT = tab;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("characteristics",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // characteristics ::= characteristics COMMA QSTRING REAL EURODAY 
            {
              HashMap RESULT =null;
		int tableft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tabright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap tab = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int priceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int priceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float price = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        tab.put((String)dim, (Float)price);
        RESULT = tab;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("characteristics",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // users_sections ::= minsum reservations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("users_sections",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // minsum ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("minsum",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // minsum ::= MIN_SUM OP items CP SCOLON 
            {
              Object RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float[] res = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        Float min = (Float)res[0];
        Float sum = (Float)res[1];
        System.out.println("MIN: " + formatFloat(min) + " SUM: " + formatFloat(sum));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("minsum",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // items ::= QSTRING DOT QSTRING 
            {
              Float[] RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Float price = (Float)parser.table.get(type).get(dim);
        Float[] res = new Float[2];
        res[0]=price;
        res[1]=price;
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // items ::= items COMMA QSTRING DOT QSTRING 
            {
              Float[] RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Float[] res = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Float price = (Float)parser.table.get(type).get(dim);
        if(price<res[0]){
            res[0]=price;
        }
        res[1]=res[1]+price;
        RESULT = res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // electricity ::= ELECTRICITY 
            {
              Boolean RESULT =null;
		 RESULT=true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("electricity",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // electricity ::= 
            {
              Boolean RESULT =null;
		 RESULT=false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("electricity",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // reservations ::= REAL electricity QSTRING COLON durations SCOLON 
            {
              Object RESULT =null;
		int discountleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int discountright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Float discount = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean el = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int usernameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int usernameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String username = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float sum = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    System.out.println(username + " " + formatFloat(sum));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservations",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // reservations ::= reservations REAL electricity QSTRING COLON durations SCOLON 
            {
              Object RESULT =null;
		int discountleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int discountright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Float discount = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean el = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int usernameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int usernameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String username = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float sum = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    System.out.println(username + " " + formatFloat(sum));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reservations",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // durations ::= QSTRING DOT QSTRING UINT 
            {
              Float RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String dim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int daysleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int daysright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer days = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    Boolean el = (Boolean)parser.stack(-6);
    Float discount = (Float)parser.stack(-7);
    Float price = (Float)parser.table.get(type).get(dim);
    Float res = days*price*discount;
    if(el){
        res = res + 10.00f;
    }
    RESULT = res;
    System.out.println(type + "." + dim + " " +formatFloat(res));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("durations",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // durations ::= durations COMMA QSTRING DOT QSTRING UINT 
            {
              Float RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Float res = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String dim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int daysleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int daysright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer days = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Boolean el = (Boolean)parser.stack(-8);
        Float discount = (Float)parser.stack(-9);
        Float price = (Float)parser.table.get(type).get(dim);
        Float res1 = days*price*discount;
        if(el){
            res1 = res1 + 10.00f;
        }
        System.out.println(type + "." + dim + " " +formatFloat(res1));
        RESULT = res1 + res;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("durations",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
